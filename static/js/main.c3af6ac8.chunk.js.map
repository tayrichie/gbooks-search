{"version":3,"sources":["components/Book.js","components/ResultsInfo.js","actions/types.js","actions/paginationActions.js","components/Pagination.js","components/SearchResults.js","components/SearchForm.js","actions/searchActions.js","reducers/searchReducer.js","reducers/paginationReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Book","react_default","a","createElement","this","props","authors","map","author","title","date","Component","ResultsInfo","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","findCommonAuthor","bind","assertThisInitialized","results","_ref","resultsAuthors","result","volumeInfo","allResults","concat","apply","toConsumableArray","commonAuthor","sort","b","filter","v","length","pop","undefined","className","resultsCount","responseTime","SEARCH_AUTHOR","SET_PAGE","setPage","page","type","payload","currentPage","Pagination","switchPage","e","dispatchEvent","itemsPerPage","totalPages","pagesArray","i","push","index","key","value","mapDispatchToProps","connect","state","SearchResults","resultItems","returnedResults","slice","book","Book_Book","publishedDate","ResultsInfo_ResultsInfo","components_Pagination","SearchForm","apiKey","searchQuery","onChange","onSubmit","setState","defineProperty","target","name","preventDefault","enteredQuery","searchAuthor","htmlFor","placeholder","id","query","respTime","request","uri","method","time","err","resp","console","log","timings","response","dispatch","fetch","then","res","json","data","items","initialState","initialPaginationState","pageSet","combineReducers","arguments","action","objectSpread","pagination","middleware","thunk","store","createStore","rootReducer","applyMiddleware","App","es","content","components_SearchForm","components_SearchResults","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3af6ac8.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Book extends Component {\n  render() {\n\n    return (\n      <li>\n        <strong>Author:</strong> {this.props.authors ? this.props.authors.map(author => author) : \"No author recorded\"}<br/>\n        <strong>Title:</strong> {this.props.title}<br/>\n        <small><strong>Publication Dates:</strong> {this.props.date}</small>\n      </li>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class ResultsInfo extends Component {\n  constructor(props){\n    super(props);\n\n    this.findCommonAuthor = this.findCommonAuthor.bind(this);\n  }\n\n  findCommonAuthor(results){\n    let resultsAuthors = results.map(result => result.volumeInfo.authors);\n    let allResults = [].concat(...resultsAuthors);\n\n    let commonAuthor = allResults.sort((a,b) =>\n    allResults.filter(v => v===a).length\n    - allResults.filter(v => v===b).length\n  ).pop();\n\n    if(commonAuthor === undefined) {\n      commonAuthor = \"no author recorded\";\n    }\n\n    return commonAuthor;\n  }\n\n  render() {\n    let commonAuthor = this.findCommonAuthor(this.props.results);\n\n    return (\n      <aside className=\"results-info\">\n        <strong>Total Results: </strong> {this.props.resultsCount}\n        <br/>\n        <strong>Common Author: </strong> {commonAuthor}\n        <br/>\n        <em>returned in</em> <strong>{this.props.responseTime === undefined ? 0 : this.props.responseTime} seconds</strong>\n      </aside>\n    )\n  }\n}\n","export const SEARCH_AUTHOR = \"SEARCH_AUTHOR\";\nexport const SET_PAGE = \"SET_PAGE\";\nexport const SET_PAGE_DEFAULT = \"SET_PAGE_DEFAULT\";","import { SET_PAGE } from './types';\n\nexport function setPage(page){\n  return {\n    type: SET_PAGE,\n    payload: {\n      currentPage: page\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setPage } from '../actions/paginationActions';\n\nclass Pagination extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.switchPage = this.switchPage.bind(this);\n  }\n\n  switchPage(e){\n\n    dispatchEvent(setPage);\n  }\n\n  render() {\n    \n    const itemsPerPage = this.props.itemsPerPage;\n    let totalPages = this.props.resultsCount / itemsPerPage;\n\n    let pagesArray = [];\n    for(var i=0; i<totalPages; i++){\n      pagesArray.push(i+1);\n    }\n\n    return (\n      <ul className=\"pagination\">\n        {pagesArray.map((page, index) => \n          <li key={index}><button type=\"button\" value={page}>{page}</button></li>\n        )}\n      </ul>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentPage: state.currentPage,\n  itemsPerPage: state.itemsPerPage\n});\n\n\nconst mapDispatchToProps = {\n  setPage\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pagination);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport Book from './Book';\nimport ResultsInfo from './ResultsInfo';\nimport Pagination from './Pagination';\n\nclass SearchResults extends Component {\n  render() {\n    let allResults = this.props.results.results;\n    let returnedResults = allResults.slice(0, 10);\n    let resultItems;\n\n    if(allResults.length > 0) {\n      resultItems = returnedResults.map((book, index) => (\n        <Book key={index} authors={book.volumeInfo.authors} title={book.volumeInfo.title} date={book.volumeInfo.publishedDate} />\n      ));\n    } else {\n      resultItems = (<li>Sorry, there are no results.</li>);\n    }\n\n    return (\n      <div className=\"results-container\">\n        {resultItems.length ? \n          <ResultsInfo results={returnedResults} resultsCount={allResults.length} responseTime={this.props.results.responseTime}/> : null}\n\n        {resultItems.length ? \n          <ul className=\"results-list\">\n            {resultItems}\n          </ul>\n          : null\n        }\n        \n        {resultItems.length ? \n          <Pagination itemsPerPage={this.props.itemsPerPage} resultsCount={allResults.length}/>\n          : null\n        }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  results: state.results,\n  responseTime: state.responseTime,\n});\n\nexport default connect(mapStateToProps, null)(SearchResults);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { searchAuthor } from '../actions/searchActions';\nimport {setPage} from '../actions/paginationActions';\n\nclass SearchForm extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      apiKey: 'AIzaSyDDGBpdHwDPOvh_k7rrt8c2FQUFFSvwUq4',\n      searchQuery: ''\n    }\n\n    this.onChange= this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(e){\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  onSubmit(e){\n    e.preventDefault();\n\n    const enteredQuery = {\n      key: this.state.apiKey,\n      searchQuery: this.state.searchQuery\n    }\n\n    this.props.searchAuthor(enteredQuery);\n  }\n\n  render() {\n    return (\n      <div className=\"search-container\">\n        <form onSubmit={this.onSubmit} className=\"search-form\">\n          <label htmlFor=\"searchQuery\" className=\"search-label\"><h1>Search For a Title</h1></label>\n          <input type=\"text\" onChange={this.onChange} placeholder=\"Enter Book Title\" id=\"searchQuery\" name=\"searchQuery\" className=\"search-field\" value={this.state.searchQuery}></input>\n          <button type=\"submit\" id=\"bookQuerySubmit\" className=\"search-submit\">Search</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  results: state.results,\n  responseTime: state.responseTime,\n  itemsPerPage: state.itemsPerPage\n})\n\nconst mapDispatchToProps = {\n  searchAuthor,\n  setPage\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm);\n","import { SEARCH_AUTHOR } from './types';\nimport request from 'request';\n\nexport function searchAuthor(query){\n  let searchQuery = `https://www.googleapis.com/books/v1/volumes?q=${query.searchQuery}&key=${query.key}&maxResults=40`;\n\n  let respTime = 0;\n  request({\n    uri: searchQuery,\n    method: 'GET',\n    time: true\n  }, (err, resp) => {\n    if(err){\n      console.log(err);\n    } else {\n      respTime = resp.timings.response/1000;\n    }\n  })\n\n  return function(dispatch){\n    fetch(searchQuery, {\n      method: 'GET'\n    })\n      .then(res => res.json())\n      .then(data => {\n        return dispatch({\n            type: SEARCH_AUTHOR,\n            payload: {\n              results: data.items,\n              responseTime: respTime\n            }\n        })\n      });\n  }\n}\n","import { SEARCH_AUTHOR, SET_PAGE } from '../actions/types';\n\nconst initialState = {\n  results: [],\n  responseTime: 0,\n}\n\nexport default function(state = initialState, action){\n  switch(action.type){\n    case SEARCH_AUTHOR:\n      return {\n        ...state,\n        results: action.payload.results,\n        responseTime: action.payload.responseTime\n      };\n    default:\n      return state;\n  }\n}","import { SET_PAGE } from '../actions/types';\n\nconst initialPaginationState = {\n  currentPage: 1,\n  pageSet: 0,\n  itemsPerPage: 10\n}\n\nexport default function(state = initialPaginationState, action){\n  switch(action.type){\n    case SET_PAGE:\n      return {\n        ...state,\n        currentPage: action.payload.currentPage,\n      };\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport searchReducer from './searchReducer';\nimport pagiantionReducer from './paginationReducer';\n\nexport default combineReducers({\n  results: searchReducer,\n  pagination: pagiantionReducer\n});","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState, applyMiddleware(...middleware));\n\nexport default store;","import React, { Component } from 'react';\nimport './normalize.css';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport SearchResults from './components/SearchResults';\nimport SearchForm from './components/SearchForm';\nimport store from './store';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n        <main id=\"main\" className=\"app-wrapper\">\n          <SearchForm/>\n          <SearchResults />\n        </main>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}